// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: ' '; // 1
    display: table; // 2
  }

  &:after {
    clear: both;
  }
}

@mixin reset-text() {
  font-family: $font-family;
  // We deliberately do NOT reset font-size.
  font-style: normal;
  font-weight: normal;
  letter-spacing: normal;
  line-break: auto;
  line-height: $line-height-base;
  text-align: left; // Fallback for where `start` is not supported
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  white-space: normal;
  word-break: normal;
  word-spacing: normal;
  word-wrap: normal;
}

// Grid System
// Creates a wrapper for a series of columns

@mixin make-row($gutter: $grid-gutter-width) {
  // Then clear the floated columns
  @include clearfix();

  @media (min-width: $screen-sm-min) {
    margin-left: ($gutter / -2);
    margin-right: ($gutter / -2);
  }
  // Negative margin nested rows out to align the content of columns
  .row {
    margin-left: ($gutter / -2);
    margin-right: ($gutter / -2);
  }
}

// Generate the small columns

@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
  // Calculate width based on number of columns available
  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns

@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
  // Calculate width based on number of columns available
  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Alerts

@mixin alert-variant($background, $border, $icon-color, $text-color) {
  background-color: $background;
  border-color: $border;
  color: $text-color;

  > .cyclops-icon,
  .alert-icon .cyclops-icon {
    fill: $icon-color;
  }

  hr {
    border-top-color: darken($border, 5%);
  }

  .alert-link {
    color: darken($text-color, 10%);
  }
}

// Tags

@mixin tag-variant($color) {
  background-color: $color;

  &[href] {
    &:hover,
    &:focus {
      background-color: darken($color, 10%);
    }
  }
}

// Horizontal dividers
//
// Dividers (basically an hr) within dropdowns and nav lists

@mixin nav-divider($color: #e5e5e5) {
  height: 1px;
  margin: (($line-height-computed / 2) - 1) 0;
  overflow: hidden;
  background-color: $color;
}

// Navbar vertical align
//
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbar-vertical-align(30px);` to calculate the appropriate top margin.

@mixin navbar-vertical-align($element-height) {
  margin-top: (($navbar-height - $element-height) / 2);
  margin-bottom: (($navbar-height - $element-height) / 2);
}


@mixin button-variant($color, $background, $border) {
  $active-background: darken($background, 10%);
  $active-border: darken($border, 12%);

  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover {
    color: $color;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    color: $color;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: $active-background;
    border-color: $active-border;

    &:hover,
    &:focus,
    &.focus {
      color: $color;
      background-color: darken($background, $btn-hover-darken-percentage);
      border-color: darken($border, 25%);
    }
  }

  &.disabled,
  &:disabled {
    &:focus,
    &.focus {
      background-color: $background;
      border-color: $border;
    }
    &:hover {
      background-color: $background;
      border-color: $border;
    }
  }

  &.btn-icon {
    background-color: transparent;
    border-color: transparent;
    .cyclops-icon {
      fill: $background;
    }

    &:active,
    &.active {
      background-color: transparent;
      border-color: transparent;
      box-shadow: none;
    }

    &:hover {
      .cyclops-icon {
        fill: $active-background;
      }
    }
  }

  .cyclops-icon {
    fill: $color;
  }
}

@mixin button-outline-variant($color, $color-hover: #fff) {
  color: $color;
  background-image: none;
  background-color: transparent;
  border-color: $color;

  &:hover {
    color: $color-hover;
    background-color: $color;
    border-color: $color;
  }

  &:focus,
  &.focus {
    color: $color-hover;
    background-color: $color;
    border-color: $color;
  }

  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color-hover;
    background-color: $color;
    border-color: $color;

    &:hover,
    &:focus,
    &.focus {
      color: $color-hover;
      background-color: darken($color, $btn-hover-darken-percentage);
    }
  }

  &.disabled,
  &:disabled {
    &:focus,
    &.focus {
      color: $color;
      background-color: transparent;
    }
    &:hover {
      color: $color;
      background-color: transparent;
    }
  }
}
